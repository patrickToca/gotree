{"name":"Gotree","tagline":"tree visualization, algorithms","body":"gotree [![Build Status](https://travis-ci.org/gyuho/gotree.svg?branch=master)](https://travis-ci.org/gyuho/gotree) [![GoDoc](https://godoc.org/github.com/gyuho/gotree?status.png)](http://godoc.org/github.com/gyuho/gotree) [![Project Stats](http://www.ohloh.net/p/714469/widgets/project_thin_badge.gif)](http://www.ohloh.net/p/714469)\r\n==========\r\n\r\ngotree provides tree visualizing tools and algorithm implementations.\r\n\r\n- [Getting Started](https://github.com/gyuho/gotree#getting-started)\r\n- [Package Hierarchy](https://github.com/gyuho/gotree#package-hierarchy)\r\n- [What is Tree? (YouTube Clips)](https://github.com/gyuho/gotree#what-is-tree-youtube-clips)\r\n- [Example : Binary Search Tree](https://github.com/gyuho/gotree#example--binary-search-tree)\r\n- [AVL Tree](https://github.com/gyuho/gotree#avl-tree)\r\n- [Example : AVL Tree](https://github.com/gyuho/gotree#example--avl-tree)\r\n- [To-Do-List](https://github.com/gyuho/gotree#to-do-list)\r\n- [Other](https://github.com/gyuho/gotree#other)\r\n\r\n\r\nGetting Started\r\n==========\r\n- [godoc.org](http://godoc.org/github.com/gyuho/gotree)\r\n- [gowalker.org](http://gowalker.org/github.com/gyuho/gotree#_index)\r\n\r\n```go\r\n// to install, in the command line\r\nmkdir $HOME/go\r\nexport GOPATH=$HOME/go\r\ngo get github.com/gyuho/gotree\r\n\r\n// to include, in the code\r\nimport \"github.com/gyuho/gotree\"\r\n\r\n// to call the function, in the code\r\n[package_name].[function]\r\n\r\n// to execute\r\ngo install\r\n// or\r\ngo build\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nPackage Hierarchy\r\n==========\r\n```go\r\ntree/     # Tree Data Structure\r\n  \r\n  bst/    # Binary Search Tree\r\n  bstviz/ # Visualization (Graphviz)\r\n  \r\n  avl/    # AVL Tree\r\n  avlviz/ # Visualization (Graphviz)\r\n\r\n\r\nexample/  # Example Code\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nWhat is Tree? (YouTube Clips)\r\n========\r\n\r\n<a href=\"https://www.youtube.com/watch?v=NdfIfxTsVDo\" target=\"_blank\"><img src=\"http://img.youtube.com/vi/NdfIfxTsVDo/0.jpg\"></a>\r\n<ul>\r\n  <li class=\"special\"><a href=\"http://www.youtube.com/watch?v=NdfIfxTsVDo&list=PLT6aABhFfinvsSn1H195JLuHaXNS6UVhf\" target=\"_blank\">Tree, Heap, Graph (Playlist)</a></li>\r\n</ul>\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nExample : Binary Search Tree\r\n==========\r\n```go\r\ntr := bst.NewTree(5)\r\nfor i := 0; i < 10; i++ {\r\n\tif i != 5 {\r\n\t\ttr = tr.Insert(int64(i))\r\n\t}\r\n}\r\nShow(tr, \"tree1.dot\")\r\n```\r\n\r\n<img src=\"./files/tree01.png\" alt=\"tree01\" width=\"140px\" height=\"300px\"/>\r\n\r\n<hr>\r\n\r\n```go\r\ntr := bst.NewTree(5)\r\ntr.Inserts(7, 8, 5, 4, 2, 1, 6, 3)\r\nShow(tr, \"tree2.dot\")\r\n```\r\n\r\n<img src=\"./files/tree02.png\" alt=\"tree02\" width=\"180px\" height=\"250px\"/>\r\n\r\n<hr>\r\n\r\n```go\r\ntr := bst.NewTree(5)\r\ntr.Inserts(7, 8, 5, 4, 2, 1, 6, 3)\r\ntr.Delete(int64(6))\r\nShow(tr, \"tree3.dot\")\r\n```\r\n\r\n<img src=\"./files/tree03.png\" alt=\"tree03\" width=\"180px\" height=\"250px\"/>\r\n\r\n<hr>\r\n\r\n```go\r\ntr := bst.NewTree(5)\r\ntr.Inserts(7, 8, 4, 2, 1, 3)\r\ntr.Delete(int64(7))\r\nShow(tr, \"tree4.dot\")\r\n```\r\n\r\n<img src=\"./files/tree04.png\" alt=\"tree04\" width=\"180px\" height=\"250px\"/>\r\n\r\n<hr>\r\n\r\n```go\r\ntr := bst.NewTree(5)\r\ntr.Inserts(7, 8, 3, 4, 2, 1, 6)\r\ntr = tr.Delete(int64(5))\r\nShow(tr, \"tree5.dot\")\r\n```\r\n\r\n<img src=\"./files/tree05.png\" alt=\"tree05\" width=\"180px\" height=\"250px\"/>\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\n<hr>\r\n\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/AVL_tree\" target=\"_blank\">AVL Tree</a>\r\n==========\r\nAVL tree is a self-balancing binary search tree.\r\n\r\nFor lookup-intensive applications, AVL trees are faster than red-black trees because they are more rigidly balanced. Similar to red-black trees, AVL trees are height-balanced. Both are in general not weight-balanced\r\n\r\n**It is basically a Binary Search Tree (BST) with additional balancing property:**\r\n\r\n**`Height of the Left Sub-Tree`** and **`Height of the Right Sub-Tree`** differ by at most 1\r\n\r\n**Balance(Tree)** = **Height(Left)** - **Height(Right)** = -1, 0, 1\r\n\r\nFor example,\r\n```\r\n  1\r\n / \\\r\n    2\r\n   / \\\r\n  3   4\r\n```\r\nThe node 2 is balanced, but the node 1 is NOT balanced\r\nbecause the Height(Left) is 0 and Height(Right) is 2\r\n\r\n##### Insertion\r\n1. Insert into Left-Sub of Left-Child\r\n2. Insert into Right-Sub of Right-Child\r\n3. Insert into Left-Sub of Right-Child\r\n4. Insert into Right-Sub of Left-Child\r\n\r\n##### Rotation for Re-balancing\r\n1. LL Rotation\r\n2. RR Rotation\r\n3. LR Rotation\r\n4. RL Rotation\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n##### Rebalance (Rearrange)\r\n\r\n**LL Rotation**\r\n\r\nUnbalanced!\r\n```\r\n    4\r\n   /\r\n  3\r\n /\r\n2\r\n```\r\n\r\nthen\r\n```\r\n   3\r\n  / \\\r\n 2   4\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n**RR Rotation**\r\n\r\nUnbalanced!\r\n```\r\n    6\r\n     \\\r\n      7\r\n       \\\r\n        8\r\n```\r\n\r\nthen\r\n```\r\n   7\r\n  / \\\r\n 6   8\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n**LR Rotation**\r\n\r\nUnbalanced!\r\n```\r\n    4\r\n   /\r\n  2\r\n   \\\r\n    3\r\n```\r\n\r\nthen\r\n```\r\n   3\r\n  / \\\r\n 2   4\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n**RL Rotation**\r\n\r\nUnbalanced!\r\n```\r\n    6\r\n     \\\r\n      8\r\n     /\r\n    7\r\n```\r\n\r\nthen\r\n```\r\n   7\r\n  / \\\r\n 6   8\r\n```\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n##### Determine which rotation to use\r\n- **`Height(Unbalanced-Node)`** is:\r\n\t- **Positive**: Left-Child (Example Height = 2)\r\n\t\t- If **`Height(Left-Child)`** is:\r\n\t\t\t- Positive: `LL Rotation` (Example Height = 1)\r\n\t\t\t- Negative: `LR Rotation` (Example Height = -1)\r\n\t- **Negative**: Right-Child (Example Height = 2)\r\n\t\t- If **`Height(Right-Child)`** is:\r\n\t\t\t- Positive: `RL Rotation` (Example Height = 1)\r\n\t\t\t- Negative: `RR Rotation` (Example Height = -1)\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nExample : AVL Tree\r\n==========\r\n```go\r\nfunc Test_avlviz(test *testing.T) {\r\n  tr := avl.NewTree(4)\r\n  tr.BalanceInsert(6)\r\n  tr.BalanceInsert(5)\r\n  avlviz.Show(tr, \"avl-before.dot\")\r\n\r\n  tr.BalanceRL(5)\r\n  avlviz.Show(tr, \"avl-after.dot\")\r\n}\r\n```\r\n\r\n**Before**\r\n<img src=\"./files/avl-before.png\" alt=\"avl-before\" width=\"50px\" height=\"100px\"/>\r\n\r\n**After**\r\n<img src=\"./files/avl-after.png\" alt=\"avl-after\" width=\"120px\" height=\"120px\"/>\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n<hr>\r\n\r\n```go\r\nfunc Test_Show25(test *testing.T) {\r\n  // Left Left Case\r\n  tr1 := avl.NewTree(13)\r\n  tr1.TreeInserts(5, 17, 3, 10, 4, 2)\r\n  Show(tr1, \"avl_balanced_25.dot\")\r\n\r\n  // Left Right Case\r\n  tr2 := avl.NewTree(13)\r\n  tr2.TreeInserts(5, 17, 3, 10, 12, 9)\r\n  Show(tr2, \"avl_balanced_26.dot\")\r\n\r\n  // Right Right Case\r\n  tr3 := avl.NewTree(7)\r\n  tr3.TreeInserts(4, 12, 8, 15, 17, 13)\r\n  Show(tr3, \"avl_balanced_27.dot\")\r\n\r\n  // Right Left Case\r\n  tr4 := avl.NewTree(7)\r\n  tr4.TreeInserts(4, 12, 9, 15, 8, 10)\r\n  Show(tr4, \"avl_balanced_28.dot\")\r\n}\r\n```\r\n\r\n<img src=\"./files/avl_balanced_25.png\" alt=\"avl_balanced_25\" width=\"240px\" height=\"240px\"/>\r\n<img src=\"./files/avl_balanced_26.png\" alt=\"avl_balanced_26\" width=\"240px\" height=\"240px\"/>\r\n<img src=\"./files/avl_balanced_27.png\" alt=\"avl_balanced_27\" width=\"240px\" height=\"240px\"/>\r\n<img src=\"./files/avl_balanced_28.png\" alt=\"avl_balanced_28\" width=\"240px\" height=\"240px\"/>\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nTo-Do-List\r\n==========\r\n**Non-Committal on a Timeline**\r\n\r\n- Tree Deletion\r\n- More Tree Data Structures\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\nOther\r\n==========\r\n- <a href=\"https://code.google.com/p/go-wiki/wiki/Projects?ts=1395809107&updated=Projects#Data_Structures\" target=\"_blank\">Data Structure Projects</a>\r\n- <a href=\"https://github.com/petar/GoLLRB\" target=\"_blank\">GoLLRB</a> by Petar Maymounkov (Left-Leaning Red-Black Tree)\r\n- <a href=\"https://github.com/timtadh/file-structures\" target=\"_blank\">File Structures (B+Tree, BTree)</a> by Tim Henderson\r\n- <a href=\"https://github.com/psankar/btree-go\" target=\"_blank\">btree-go</a> by Sankar (B-Tree)\r\n\r\n[↑ top](https://github.com/gyuho/gotree#gotree---)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}